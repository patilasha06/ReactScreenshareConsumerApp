!function(e,t){for(var n in t)e[n]=t[n]}(exports,function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="dist/",n(n.s=11)}([function(e,t,n){e.exports=n(2)(6)},function(e,t,n){e.exports=n(2)(266)},function(e,t){e.exports=require("./vendor")},function(e,t,n){e.exports=n(2)(287)},function(e,t,n){e.exports=n(2)(313)},function(e,t,n){e.exports=n(2)(122)},function(e,t,n){e.exports=n(2)(318)},function(e,t,n){e.exports=n(2)(136)},function(e,t,n){e.exports=n(2)(169)},function(e,t,n){e.exports=n(2)(316)},function(e,t,n){e.exports=n(2)(312)},function(e,t,n){"use strict";n.r(t);var r,o=n(0),a=n(3),c=n(6),l=n(1),u=n(4),i=n(8),s=n(9),p=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),f=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return p(t,e),t.prototype.render=function(){return o.createElement("div",{className:"main-nav"},o.createElement("div",{className:"navbar navbar-inverse"},o.createElement("div",{className:"navbar-header"}),o.createElement("div",{className:"clearfix"}),o.createElement("div",{className:"navbar-collapse collapse"},o.createElement("ul",{className:"nav navbar-nav"},o.createElement("li",null,o.createElement(l.NavLink,{exact:!0,to:"/",activeClassName:"active"},o.createElement("span",{className:"glyphicon glyphicon-home"})," Home")),o.createElement("li",null,o.createElement(l.NavLink,{to:"/counter",activeClassName:"active"},o.createElement("span",{className:"glyphicon glyphicon-education"})," Counter")),o.createElement("li",null,o.createElement(l.NavLink,{to:"/fetchdata",activeClassName:"active"},o.createElement("span",{className:"glyphicon glyphicon-th-list"})," Fetch data"))))))},t}(o.Component),m=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),d=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return m(t,e),t.prototype.render=function(){return o.createElement("div",{className:"container-fluid"},o.createElement("div",{className:"row"},o.createElement("div",{className:"col-sm-3"},o.createElement(f,null)),o.createElement("div",{className:"col-sm-9"},this.props.children)))},t}(o.Component),E=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),h=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return E(t,e),t.prototype.render=function(){return o.createElement("div",null,o.createElement("h1",null,"Hello, world!"))},t}(o.Component),y=n(7),v={requestWeatherForecasts:function(e){return function(t,n){if(e!==n().weatherForecasts.startDateIndex){var r=Object(y.fetch)("api/SampleData/WeatherForecasts?startDateIndex="+e).then((function(e){return e.json()})).then((function(n){t({type:"RECEIVE_WEATHER_FORECASTS",startDateIndex:e,forecasts:n})}));Object(y.addTask)(r),t({type:"REQUEST_WEATHER_FORECASTS",startDateIndex:e})}}}},_={forecasts:[],isLoading:!1},b=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),O=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return b(t,e),t.prototype.componentWillMount=function(){var e=parseInt(this.props.match.params.startDateIndex)||0;this.props.requestWeatherForecasts(e)},t.prototype.componentWillReceiveProps=function(e){var t=parseInt(e.match.params.startDateIndex)||0;this.props.requestWeatherForecasts(t)},t.prototype.render=function(){return o.createElement("div",null,o.createElement("h1",null,"Weather forecast"),o.createElement("p",null,"This component demonstrates fetching data from the server and working with URL parameters."),this.renderForecastsTable(),this.renderPagination())},t.prototype.renderForecastsTable=function(){return o.createElement("table",{className:"table"},o.createElement("thead",null,o.createElement("tr",null,o.createElement("th",null,"Date"),o.createElement("th",null,"Temp. (C)"),o.createElement("th",null,"Temp. (F)"),o.createElement("th",null,"Summary"))),o.createElement("tbody",null,this.props.forecasts.map((function(e){return o.createElement("tr",{key:e.dateFormatted},o.createElement("td",null,e.dateFormatted),o.createElement("td",null,e.temperatureC),o.createElement("td",null,e.temperatureF),o.createElement("td",null,e.summary))}))))},t.prototype.renderPagination=function(){var e=(this.props.startDateIndex||0)-5,t=(this.props.startDateIndex||0)+5;return o.createElement("p",{className:"clearfix text-center"},o.createElement(l.Link,{className:"btn btn-default pull-left",to:"/fetchdata/"+e},"Previous"),o.createElement(l.Link,{className:"btn btn-default pull-right",to:"/fetchdata/"+t},"Next"),this.props.isLoading?o.createElement("span",null,"Loading..."):[])},t}(o.Component),x=Object(a.connect)((function(e){return e.weatherForecasts}),v)(O),N=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),g=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return N(t,e),t.prototype.render=function(){var e=this;return o.createElement("div",null,o.createElement("h1",null,"Counter"),o.createElement("p",null,"This is a simple example of a React component."),o.createElement("p",null,"Current count: ",o.createElement("strong",null,this.props.count)),o.createElement("button",{onClick:function(){e.props.increment()}},"Increment"))},t}(o.Component),j=Object(a.connect)((function(e){return e.counter}),{increment:function(){return{type:"INCREMENT_COUNT"}},decrement:function(){return{type:"DECREMENT_COUNT"}}})(g),T=o.createElement(d,null,o.createElement(l.Route,{exact:!0,path:"/",component:h}),o.createElement(l.Route,{path:"/counter",component:j}),o.createElement(l.Route,{path:"/fetchdata/:startDateIndex?",component:x})),C=n(5),R=n(10),w=n.n(R),S={counter:function(e,t){switch(t.type){case"INCREMENT_COUNT":return{count:e.count+1};case"DECREMENT_COUNT":return{count:e.count-1};default:}return e||{count:0}},weatherForecasts:function(e,t){var n=t;switch(n.type){case"REQUEST_WEATHER_FORECASTS":return{startDateIndex:n.startDateIndex,forecasts:e.forecasts,isLoading:!0};case"RECEIVE_WEATHER_FORECASTS":if(n.startDateIndex===e.startDateIndex)return{startDateIndex:n.startDateIndex,forecasts:n.forecasts,isLoading:!1};break;default:}return e||_}};function I(e,t){var n="undefined"==typeof window?null:window,r=n&&n.__REDUX_DEVTOOLS_EXTENSION__;return Object(C.compose)(Object(C.applyMiddleware)(w.a,Object(u.routerMiddleware)(e)),r?r():function(e){return e})(C.createStore)(function(e){return Object(C.combineReducers)(Object.assign({},e,{routing:u.routerReducer}))}(S),t)}t.default=Object(s.createServerRenderer)((function(e){return new Promise((function(t,n){var r=e.baseUrl.substring(0,e.baseUrl.length-1),s=e.url.substring(r.length),p=I(Object(i.createMemoryHistory)());p.dispatch(Object(u.replace)(s));var f={},m=o.createElement(a.Provider,{store:p},o.createElement(l.StaticRouter,{basename:r,context:f,location:e.location.path,children:T}));Object(c.renderToString)(m),f.url?t({redirectUrl:f.url}):e.domainTasks.then((function(){t({html:Object(c.renderToString)(m),globals:{initialReduxState:p.getState()}})}),n)}))}))}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,